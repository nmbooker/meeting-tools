#! /usr/bin/env ruby

# Library for reading and interpreting a meeting minutes file.

module Meeting
  class MinutesReader
    # Initialise a reader with an interpreter.
    # The interpreter will respond to messages generated by this reader,
    # and do appropriate things.
    def initialize(interpreter)
      @interp = interpreter
      @had_heading = false
      @in_special_list = false
      @in_special_list_item = false
      @interp.reader = self
    end

    # Process a file.
    def process_file(input_file)
      process_lines(input_file)
    end

    # Processes all the given lines
    def process_lines(input_file)
      for line in input_file
        process_line(line)
      end
      end_of_file
    end

    # Process a single line of the input file.
    def process_line(line)
      if line =~ /^=/ then
        process_heading_line(line)
      elsif (listtype = special_list_line_type(line)) then
        special_list_line(listtype, line)
      elsif line =~ /^\s*:/ then
        special_list_continuation_line(line)
      else
        @interp.normal_line(line)
      end
    end

    # Get the current special list type if any.
    def special_list_type
      @in_special_list ? @in_special_list : nil
    end

    # Get whether in a special list.
    def in_special_list?
      @in_special_list ? true : false
    end

    private
    def process_heading_line(line)
      end_of_section
      @had_heading = true
      matchobj = /^(=+) +(.*)$/.match(line)
      level = matchobj[1].length
      title = matchobj[2]
      @interp.start_section(level, title, line)
    end

    # This returns nil if not a special list line.
    def special_list_line_type(line)
      case line
        when /^\s*TODO:/ then :TODO
        when /^\s*DONE:/ then :DONE
        when /^\s*FUTURE:/ then :FUTURE
        else nil
      end
    end

    def special_list_line(list_type, line)
      unless @in_special_list == list_type
        # We're just entering the list
        @interp.start_special_list(list_type)
        @in_special_list = list_type
      end
      end_of_special_list_item    # Implicitly end of the last item
      @in_special_list_item = list_type   # And the start of this one
      @interp.start_special_list_item
      text = line.sub(/^\s*[^:]+: ?/, '')
      @interp.special_list_item_line(true, text, line)
    end

    def special_list_continuation_line(line)
      if @in_special_list and @in_special_list_item
        text = line.sub(/^\s*: ?/, '')
        @interp.special_list_item_line(false, text, line)
      else
        @interp.normal_line(line)
      end
    end

    def end_of_section
      end_of_special_list   # implicitly
      @interp.end_section if @had_heading
    end

    def end_of_special_list
      if @in_special_list
        end_of_special_list_item   # implicitly
        @interp.end_special_list
        @in_special_list = false
      end
    end

    def end_of_special_list_item
      if @in_special_list_item
        @interp.end_special_list_item
        @in_special_list_item = false
      end
    end

    def end_of_file
      end_of_section  # implicit at end of file
    end
  end

  # Base class for minutes interpreter.
  # Defines a series of hooks you should override if you want to use the given info.
  class MinutesInterpreter
    attr_accessor :reader

    # Signals a line this interpreter has no special meaning for.
    def normal_line(original_text)
    end

    # Signals the start of a section / subsection / subsubsection etc.
    # Level starts from 1.
    def start_section(level, title, original_text)
    end

    # Signals the end of the current section at whatever level.
    # The end of the document is also implicitly the end of a section, so this
    # will be called at the end of the document too.
    def end_section
    end

    # Called when we enter a special list.
    # This could be a :DONE or :TODO list for example.
    def start_special_list(list_type)
    end

    # Called when we enter an item in a special list.
    # start_special_list(list_type) must be called first.
    def start_special_list_item
    end

    # Add text to a special list item.
    def special_list_item_line(first_line, text, original_text)
    end

    # At the end of a special list item, this is called.
    # It's also called implicitly at the end of a list.
    def end_special_list_item
    end

    # End a special list.  Called when we transition
    # to another type of list or to normal text.
    def end_special_list
    end
  end

  class TestMinutesInterpreter < MinutesInterpreter
    def normal_line(original_text)
      $stdout.write("NORMAL:          #{original_text}")
    end

    def start_section(level, text, original_text)
      $stdout.puts("SECTION LEVEL #{level}: #{text}")
    end

    def end_section
      $stdout.puts("END SECTION")
    end

    def start_special_list(list_type)
      $stdout.puts("START SPECIAL LIST OF TYPE #{list_type}")
    end

    def start_special_list_item
      $stdout.puts(" START LIST ITEM")
    end

    def special_list_item_line(first_line, text, original_text)
      $stdout.write("  ITEM TEXT:     #{text}")
    end

    def end_special_list_item
      $stdout.puts(" END LIST ITEM")
    end

    def end_special_list
      $stdout.puts("END SPECIAL LIST")
    end
  end
end

if $PROGRAM_NAME == __FILE__
  interpreter = Meeting::TestMinutesInterpreter.new
  reader = Meeting::MinutesReader.new(interpreter)
  reader.process_file($stdin)
end
